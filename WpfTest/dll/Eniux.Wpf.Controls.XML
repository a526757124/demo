<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eniux.Wpf.Controls</name>
    </assembly>
    <members>
        <member name="M:Eniux.Wpf.Controls.WindowCore.DpiHelper.LogicalPixelsToDevice(System.Windows.Point)">
            <summary>
            Convert a point in device independent pixels (1/96") to a point in the system coordinates.
            </summary>
            <param name="logicalPoint">A point in the logical coordinate system.</param>
            <returns>Returns the parameter converted to the system's coordinates.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.DpiHelper.DevicePixelsToLogical(System.Windows.Point)">
            <summary>
            Convert a point in system coordinates to a point in device independent pixels (1/96").
            </summary>
            <param name="devicePoint">A point in the physical coordinate system.</param>
            <returns>Returns the parameter converted to the device independent coordinate system.</returns>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.WindowBase">
            <summary>
            自定义window实现
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.Epsilon">
            <summary>
            Epsilon - more or less random, more or less small number.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.HitTestBorders">
            <summary>
            Matrix of the hit test values to return when responding to NC window messages.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.ResizeBorderThicknessProperty">
            <summary>
            依赖属性：系统拖拽区（八个方向）的BorderThickness
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.GlassBorderThicknessProperty">
            <summary>
            依赖属性：玻璃区的BorderThickness，值为-1时，窗体全部玻璃化
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.CaptionHeightProperty">
            <summary>
            依赖属性：标题栏高度，此高度也是可拖动窗体的高度
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.CornerRadiusProperty">
            <summary>
            Using a DependencyProperty as the backing store for CornerRadius.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.IsDwmEnabledProperty">
            <summary>
            Is DWM Enabled Dependency property
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.IsIconVisibleProperty">
            <summary>
            Gets or sets whether icon is visible
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.IsCollapsedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCollapsed.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.IsNonClientAreaActiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsNcActivated.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.ExtendMenuCommand">
            <summary>
            最小化命令
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.MinimizeCommand">
            <summary>
            最小化命令
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.MaximizeCommand">
             <summary>
            最大化命令
             </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.NormalizeCommand">
             <summary>
            还原命令
             </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.CloseCommand">
             <summary>
            关闭命令
             </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.YesCommand">
            <summary>
            对话框命令：Yes按钮命令
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.NoCommand">
            <summary>
            对话框命令：No按钮命令
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.OKCommand">
            <summary>
            对话框命令：OK按钮命令
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.WindowBase.CancelCommand">
            <summary>
            对话框命令：Cancel按钮命令
            </summary>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.SourceInitialized"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.OnApplyTemplate">
            <summary>
            请求默认模板
            </summary>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.ModifyStyle(System.Int32,System.Int32)">
            <summary>Add and remove a native WindowStyle from the HWND.</summary>
            <param name="removeStyle">The styles to be removed.  These can be bitwise combined.</param>
            <param name="addStyle">The styles to be added.  These can be bitwise combined.</param>
            <returns>Whether the styles of the HWND were modified as a result of this call.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.GetHwndState">
            <summary>
            Get the WindowState as the native HWND knows it to be.  This isn't necessarily the same as what Window thinks.
            </summary>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.UpdateSystemMenu(System.Nullable{System.Windows.WindowState})">
            <summary>
            Update the items in the system menu based on the current, or assumed, WindowState.
            </summary>
            <param name="assumeState">
            The state to assume that the Window is in.  This can be null to query the Window's state.
            </param>
            <remarks>
            We want to update the menu while we have some control over whether the caption will be repainted.
            </remarks>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.AreClose(System.Double,System.Double)">
            <summary>
            AreClose returns whether or not two doubles are "close".  That is, whether or 
            not they are within epsilon of each other.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false. 
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the AreClose comparision.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.ShowMessageBox(System.String,System.String,System.Windows.MessageBoxImage,System.Windows.MessageBoxButton)">
            <summary>
            显示一个消息框,该消息框包含消息、标题栏标题、按钮和图标，并接受默认消息框结果和返回结果。
            </summary>
            <param name="caption">一个 System.String，用于指定要显示的标题栏标题。</param>
            <param name="infotext"> 一个 System.String，用于指定要显示的文本。</param>
            <param name="InfoIcon">一个 System.Windows.MessageBoxImage 值，用于指定要显示的图标。</param>
            <param name="bttonTypes">一个 System.Windows.MessageBoxButton 值，用于指定要显示哪个按钮。</param>
            <returns>一个 System.Windows.MessageBoxResult 值，用于指定用户单击了哪个消息框按钮。</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.ShowMessageBox(System.String,System.String,System.Windows.MessageBoxImage,System.String)">
            <summary>
            显示一个消息框，MessageBoxButton的值是MessageBoxButton.OK,该消息框包含消息、标题栏标题、按钮和图标，并接受默认消息框结果和返回结果。
            </summary>
            <param name="caption">一个 System.String，用于指定要显示的标题栏标题。</param>
            <param name="infotext"> 一个 System.String，用于指定要显示的文本。</param>
            <param name="InfoIcon">一个 System.Windows.MessageBoxImage 值，用于指定要显示的图标。</param>
            <param name="OKButonContent">一个 System.String，Yes按钮的显示内容。</param>
            <returns>一个 System.Windows.MessageBoxResult 值，用于指定用户单击了哪个消息框按钮。</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.ShowMessageBox(System.String,System.String,System.Windows.MessageBoxImage,System.String,System.String)">
            <summary>
            显示一个消息框，MessageBoxButton的值是MessageBoxButton.OKCancel,该消息框包含消息、标题栏标题、按钮和图标，并接受默认消息框结果和返回结果。
            </summary>
            <param name="caption">一个 System.String，用于指定要显示的标题栏标题。</param>
            <param name="infotext"> 一个 System.String，用于指定要显示的文本。</param>
            <param name="InfoIcon">一个 System.Windows.MessageBoxImage 值，用于指定要显示的图标。</param>
            <param name="OKButonContent">一个 System.String，OK按钮的显示内容。</param>
            <param name="CancelButonContent">一个 System.String，Cancel按钮的显示内容。</param>
            <returns>一个 System.Windows.MessageBoxResult 值，用于指定用户单击了哪个消息框按钮。</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.ShowMessageBox(System.String,System.String,System.Windows.MessageBoxImage,System.String,System.String,System.Int32)">
            <summary>
            显示一个消息框，MessageBoxButton的值是MessageBoxButton.YesNo,该消息框包含消息、标题栏标题、按钮和图标，并接受默认消息框结果和返回结果。
            </summary>
            <param name="caption">一个 System.String，用于指定要显示的标题栏标题。</param>
            <param name="infotext"> 一个 System.String，用于指定要显示的文本。</param>
            <param name="InfoIcon">一个 System.Windows.MessageBoxImage 值，用于指定要显示的图标。</param>
            <param name="YesButonContent">一个 System.String，Yes按钮的显示内容。</param>
            <param name="NoButonContent">一个 System.String，No按钮的显示内容。</param>
            <param name="nullvalue"> 一个System.Int32，无任何意义的参数。</param>
            <returns>一个 System.Windows.MessageBoxResult 值，用于指定用户单击了哪个消息框按钮。</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.WindowBase.ShowMessageBox(System.String,System.String,System.Windows.MessageBoxImage,System.String,System.String,System.String)">
            <summary>
            显示一个消息框，MessageBoxButton的值是MessageBoxButton.YesNoCancel,该消息框包含消息、标题栏标题、按钮和图标，并接受默认消息框结果和返回结果。
            </summary>
            <param name="caption">一个 System.String，用于指定要显示的标题栏标题。</param>
            <param name="infotext"> 一个 System.String，用于指定要显示的文本。</param>
            <param name="InfoIcon">一个 System.Windows.MessageBoxImage 值，用于指定要显示的图标。</param>
            <param name="YesButonContent">一个 System.String，Yes按钮的显示内容。</param>
            <param name="NoButonContent">一个 System.String，No按钮的显示内容。</param>
            <param name="CancelButonContent">一个 System.String，Cancel按钮的显示内容。</param>
            <returns>一个 System.Windows.MessageBoxResult 值，用于指定用户单击了哪个消息框按钮。</returns>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.ResizeBorderThickness">
            <summary>
            获取或设置系统拖拽区（八个方向）BorderThickness，不建议更改
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.GlassBorderThickness">
            <summary>
            获取或设置透明区的BorderThickness，值为-1时，窗体全部玻璃化
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.CaptionHeight">
            <summary>
            获取或设置标题栏高度，此高度也是可拖动窗体的高度
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.CornerRadius">
            <summary>
            Gets or sets corner radius 
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.IsDwmEnabled">
            <summary>
            Is DWM Enabled
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.IsIconVisible">
            <summary>
            Gets or sets whether icon is visible
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.IsCollapsed">
            <summary>
            Gets whether window is collapsed
            </summary>              
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.IsNonClientAreaActive">
            <summary>
            Gets whether client window area is activated
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.Sys_MinBtnContentImage">
            <summary>
            设置最小化按钮图标
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.Sys_MaxBtnContentImage">
            <summary>
            设置最大化按钮图标
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.Sys_RestoreBtnContentImage">
            <summary>
            设置还原按钮图标
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.WindowCore.WindowBase.Sys_CloseBtnContentImage">
            <summary>
            设置关闭按钮图标
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Eniux.Wpf.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.LoadingCtrl">
            <summary>
            LoadingCtrl
            </summary>
        </member>
        <member name="M:Eniux.Wpf.Controls.LoadingCtrl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.FrameworkHelper">
            <summary>
            Represents class to determine .NET Framework version difference
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.FrameworkHelper.PresentationFrameworkVersion">
            <summary>
            Version of WPF
            </summary>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.FrameworkHelper.GetUseLayoutRounding(System.Windows.DependencyObject)">
            <summary>
            Gets UseLayoutRounding attached property value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.FrameworkHelper.SetUseLayoutRounding(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets UseLayoutRounding attached property value
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.FrameworkHelper.UseLayoutRoundingProperty">
            <summary>
             Using a DependencyProperty as the backing store for UseLayoutRounding.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods">
            <summary>
            Native methods
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CC_ANYCOLOR">
            <summary>
            Causes the dialog box to display all available colors in the set of basic colors. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CC_ENABLEHOOK">
            <summary>
            Enables the hook procedure specified in the lpfnHook member of this structure. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CC_ENABLETEMPLATE">
            <summary>
            The hInstance and lpTemplateName members specify a dialog box template to use in place of the default template. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CC_ENABLETEMPLATEHANDLE">
            <summary>
            The hInstance member identifies a data block that contains a preloaded dialog box template. The system ignores the lpTemplateName member if this flag is specified. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CC_FULLOPEN">
            <summary>
            Causes the dialog box to display the additional controls that allow the user to create custom colors. If this flag is not set, the user must click the Define Custom Color button to display the custom color controls.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CC_PREVENTFULLOPEN">
            <summary>
            Disables the Define Custom Color button.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CC_RGBINIT">
            <summary>
            Causes the dialog box to use the color specified in the rgbResult member as the initial color selection.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CC_SHOWHELP">
            <summary>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING registered messages that the dialog box sends when the user clicks the Help button.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CC_SOLIDCOLOR">
            <summary>
            Causes the dialog box to display only solid colors in the set of basic colors. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a 
            command from the Window menu (formerly known as the system 
            or control menu) or when the user chooses the maximize button, 
            minimize button, restore button, or close button.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_GETSYSMENU">
            <summary>
            'Famous' undocumented WM_GETSYSMENU message to display own context menu
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_DWMCOMPOSITIONCHANGED">
            <summary>
            Sent to all top-level windows when Desktop Window Manager (DWM) composition has been enabled or disabled. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases 
            the right mouse button while the cursor is within the nonclient area of 
            a window. This message is posted to the window that contains the cursor. 
            If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_SETTINGCHANGE">
            <summary>
            A message that is sent to all top-level windows when the SystemParametersInfo function changes a system-wide setting or when policy settings have changed. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the err! bad pv reference "SC_MOVE" [type 'winnotify' not supported.] or err! bad pv reference "SC_SIZE" [type 'winnotify' not supported.] value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the err! bad pv reference "SC_MOV" [type 'winnotify' not supported.]E or err! bad pv reference "SC_SIZE" [type 'winnotify' not supported.] value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WVR_HREDRAW">
            <summary>
            Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size horizontally. This value is similar to CS_HREDRAW  class style
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WVR_VREDRAW">
            <summary>
            Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size vertically. This value is similar to CS_VREDRAW  class style
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WVR_REDRAW">
            <summary>
            This value causes the entire window to be redrawn. It is a combination of WVR_HREDRAW and WVR_VREDRAW values.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MF_ENABLED">
            <summary>
            启用菜单项，以便可以选择从其灰显状态和恢复。
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MF_BYCOMMAND">
            <summary>
            Indicates that the uPosition parameter specifies the identifier of the menu item (the default). 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MF_GRAYED">
            <summary>
            禁用菜单项并将其显示为灰色，使其无法选择
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MF_DISABLED">
            <summary>
            禁用菜单项，以使它无法选择，但不是灰色此标志. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.RGN_AND">
            <summary>
            Creates the intersection of the two combined regions.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.RGN_OR">
            <summary>
            Creates the union of two combined regions.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.RGN_XOR">
            <summary>
            Creates the union of two combined regions except for any overlapping areas.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.RGN_DIFF">
            <summary>
            Combines the parts of hrgnSrc1 that are not part of hrgnSrc2.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.RGN_COPY">
            <summary>
            Creates a copy of the region identified by hrgnSrc1.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_SHOWNORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_NORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_MAXIMIZE">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_SHOWNOACTIVATE">
            <summary>
            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_SHOW">
            <summary>
            Activates the window and displays it in its current size and position. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_SHOWNA">
            <summary>
            Displays the window in its current size and position. This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SW_FORCEMINIMIZE">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_SIZE">
            <summary>
            Sizes the window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_MOVE">
            <summary>
            Moves the window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_MINIMIZE">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_MAXIMIZE">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_NEXTWINDOW">
            <summary>
            Moves to the next window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_PREVWINDOW">
            <summary>
            Moves to the previous window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_CLOSE">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_VSCROLL">
            <summary>
            Scrolls vertically.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_HSCROLL">
            <summary>
            Scrolls horizontally.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_MOUSEMENU">
            <summary>
            Retrieves the window menu as a result of a mouse click.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_KEYMENU">
            <summary>
            Retrieves the window menu as a result of a keystroke.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_ARRANGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_RESTORE">
            <summary>
            Restores the window to its normal position and size.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_TASKLIST">
            <summary>
            Activates the Start menu. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_SCREENSAVE">
            <summary>
            Executes the screen saver application specified in the [boot] section of the System.ini file.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_HOTKEY">
            <summary>
            Activates the window associated with the application-specified hot key. The lParam parameter identifies the window to activate. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_DEFAULT">
            <summary>
            Selects the default item; the user double-clicked the window menu.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_MONITORPOWER">
            <summary>
            Sets the state of the display. This command supports devices that have power-saving features, such as a battery-powered personal computer. 
            The lParam parameter can have the following values: 
            -1 - the display is powering on
            1 - the display is going to low power
            2 - the display is being shut off
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SC_CONTEXTHELP">
            <summary>
            Changes the cursor to a question mark with a pointer. If the user then clicks a control in the dialog box, the control receives a WM_HELP message. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTNOWHERE">
            <summary>
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTCLIENT">
            <summary>
            In a client area.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTCAPTION">
            <summary>
            In a title bar
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTSYSMENU">
            <summary>
            In a system menu
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTLEFT">
            <summary>
            In the left border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTRIGHT">
            <summary>
            In the right border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTTOP">
            <summary>
            In the upper-horizontal border of a window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTTOPLEFT">
            <summary>
            In the upper-left corner of a window border.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTTOPRIGHT">
            <summary>
            In the upper-right corner of a window border.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTBOTTOM">
            <summary>
            In the lower-horizontal border of a resizable window (the user can click the mouse 
            to resize the window vertically).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTBOTTOMLEFT">
            <summary>
            In the lower-left corner of a border of a resizable window 
            (the user can click the mouse to resize the window diagonally).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HTBOTTOMRIGHT">
            <summary>
            In the lower-right corner of a border of a resizable window 
            (the user can click the mouse to resize the window diagonally).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor 
            moves, or when a mouse button is pressed or released. If the 
            mouse is not captured, the message is sent to the window beneath 
            the cursor. Otherwise, the message is sent to the window 
            that has captured the mouse.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. 
            The DestroyWindow function sends the WM_NCDESTROY message to the window following the 
            WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated 
            with the window. The WM_NCDESTROY message is sent after the child windows 
            have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client 
            area must be calculated. By processing this message, an application can control the 
            content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of 
            the window is about to change. An application can use this message to override 
            the window's default maximized size and position, or its default minimum or maximum tracking size. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WM_MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SIZE_RESTORED">
            <summary>
            The window has been resized, but neither the SIZE_MINIMIZED nor SIZE_MAXIMIZED value applies.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SIZE_MINIMIZED">
            <summary>
            The window has been minimized.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SIZE_MAXIMIZED">
            <summary>
            The window has been maximized.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_POPUP">
            <summary>
            Creates a pop-up window. This style cannot be used with the WS_CHILD style
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_VISIBLE">
            <summary>
            Creates a window that is initially visible.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, 
            when a particular child window receives a WM_PAINT message, 
            the WS_CLIPSIBLINGS style clips all other overlapping child windows 
            out of the region of the child window to be updated. 
            If WS_CLIPSIBLINGS is not specified and child windows overlap, 
            it is possible, when drawing within the client area of a child window, 
            to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs within the parent window. 
            This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_CAPTION">
            <summary>
            Creates a window that has a title bar (includes the WS_BORDER style).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_THICKFRAME">
            <summary>
            Creates a window that has a sizing border. Same as the WS_SIZEBOX style.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_BORDER">
            <summary>
            Creates a window that has a thin-line border.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_SYSMENU">
            <summary>
            Creates a window that has a window menu on its title bar. The WS_CAPTION style must also be specified.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_MINIMIZEBOX">
            <summary>
            Creates a window that has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_MAXIMIZEBOX">
            <summary>
            Creates a window that has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_OVERLAPPED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a border. Same as the WS_TILED style.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_MAXIMIZE">
            <summary>
            Creates a window that is initially maximized.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_MINIMIZE">
            <summary>
            Creates a window that is initially minimized. Same as the WS_ICONIC style.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_EX_LEFT">
            <summary>
            Gives window generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_EX_LTRREADING">
            <summary>
            Displays the window text using left-to-right reading order properties. This is the default. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Places a vertical scroll bar (if present) to the right of the client area. This is the default. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.GWL_STYLE">
            <summary>
            Sets a new window style.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.GWL_EXSTYLE">
            <summary>
            Sets a new extended window style. For more information, see CreateWindowEx. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.GWL_HWNDPARENT">
            <summary>
            Retrieves a handle to the parent window, if any
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HWND_TOP">
            <summary>
            Places the window at the top of the Z order.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.HWND_NOTOPMOST">
            <summary>
            Places the window above all non-topmost windows (that is, behind all topmost windows). 
            This flag has no effect if the window is already a non-topmost window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_NOSIZE">
            <summary>
            Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_NOMOVE">
            <summary>
            Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_NOACTIVATE">
            <summary>
            Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_ASYNCWINDOWPOS">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_DEFERERASE">
            <summary>
            Prevents generation of the WM_SYNCPAINT message. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_DRAWFRAME">
            <summary>
            Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_FRAMECHANGED">
            <summary>
            Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_HIDEWINDOW">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_NOOWNERZORDER">
            <summary>
            Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_NOREDRAW">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_NOREPOSITION">
            <summary>
            Same as the SWP_NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_NOSENDCHANGING">
            <summary>
            Prevents the window from receiving the WM_WINDOWPOSCHANGING message. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_NOZORDER">
            <summary>
            Retains the current Z order (ignores the hWndInsertAfter parameter). 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.SWP_SHOWWINDOW">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.DefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The DefWindowProc function calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure. 
            </summary>
            <param name="hWnd">Handle to the window procedure that received the message. </param>
            <param name="Msg">Specifies the message. </param>
            <param name="wParam">Specifies additional message information. The content of this parameter depends on the value of the Msg parameter. </param>
            <param name="lParam">Specifies additional message information. The content of this parameter depends on the value of the Msg parameter. </param>
            <returns>The return value is the result of the message processing and depends on the message.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.MonitorFromRect(Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect@,System.UInt32)">
            <summary>
            The MonitorFromRect function retrieves a handle to the display monitor that 
            has the largest area of intersection with a specified rectangle.
            </summary>
            <param name="lprc">Pointer to a RECT structure that specifies the rectangle of interest in 
            virtual-screen coordinates</param>
            <param name="dwFlags">Determines the function's return value if the rectangle does not intersect 
            any display monitor</param>
            <returns>
            If the rectangle intersects one or more display monitor rectangles, the return value 
            is an HMONITOR handle to the display monitor that has the largest area of intersection with the rectangle.
            If the rectangle does not intersect a display monitor, the return value depends on the value of dwFlags.
            </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.MonitorFromWindow(System.IntPtr,System.UInt32)">
            <summary>
            The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window. 
            </summary>
            <param name="hwnd">A handle to the window of interest.</param>
            <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns>If the window intersects one or more display monitor rectangles, the return value is an HMONITOR handle to the display monitor that has the largest area of intersection with the window. 
            If the window does not intersect a display monitor, the return value depends on the value of dwFlags.
            </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.CreateRectRgnIndirect(Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect@)">
            <summary>
            The CreateRectRgnIndirect function creates a rectangular region. 
            </summary>
            <param name="lprc">Pointer to a RECT structure that contains the coordinates of the upper-left and lower-right corners of the rectangle that defines the region in logical units. </param>
            <returns>If the function succeeds, the return value is the handle to the region.If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.CombineRgn(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            The CombineRgn function combines two regions and stores the result in a third region. The two regions are combined according to the specified mode. 
            </summary>
            <param name="hrgnDest">A handle to a new region with dimensions defined by combining two other regions. (This region must exist before CombineRgn is called.) </param>
            <param name="hrgnSrc1">A handle to the first of two regions to be combined.</param>
            <param name="hrgnSrc2">A handle to the second of two regions to be combined.</param>
            <param name="fnCombineMode">A mode indicating how the two regions will be combined. </param>
            <returns>The return value specifies the type of the resulting region. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetMonitorInfo(System.IntPtr,Eniux.Wpf.Controls.WindowCore.NativeMethods.MonitorInfo)">
            <summary>
            The GetMonitorInfo function retrieves information about a display monitor. 
            </summary>
            <param name="hMonitor">Handle to the display monitor of interest.</param>
            <param name="lpmi">Pointer to a MONITORINFO or MONITORINFOEX structure that receives 
            information about the specified display monitor</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends a message to the message window and waits until the WndProc method has processed the message. 
            </summary>
            <param name="hWnd">Handle to destination window </param>
            <param name="Msg">Message </param>
            <param name="wParam">First message parameter </param>
            <param name="lParam">Second message parameter </param>
            <returns></returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.SetActiveWindow(System.IntPtr)">
            <summary>
            This function makes the specified top-level window associated with the thread 
            calling this function the active window. 
            </summary>
            <param name="hWnd">Handle to the top-level window to be activated. </param>
            <returns>The handle to the window that was previously active indicates success. 
            NULL indicates failure.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.SetForegroundWindow(System.IntPtr)">
            <summary>
            The SetForegroundWindow function puts the thread that created the specified window into 
            the foreground and activates the window. Keyboard input is directed to the window, 
            and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads. 
            </summary>
            <param name="hWnd">Handle to the window that should be activated and brought to the foreground. </param>
            <returns>TIf the window was brought to the foreground, the return value is nonzero. 
            If the window was not brought to the foreground, the return value is zero.
            </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetActiveWindow">
            <summary>
            The GetActiveWindow function retrieves the window handle to the active 
            window attached to the calling thread's message queue
            </summary>
            <returns>The return value is the handle to the active window attached to the calling thread's message queue. 
            Otherwise, the return value is NULL. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.DwmDefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Default window procedure for Desktop Window Manager (DWM) hit testing within the non-client area.
            </summary>
            <param name="hwnd">Handle to the window procedure that received the message.</param>
            <param name="msg">Specifies the message.</param>
            <param name="wParam">Specifies additional message information. The content of this parameter depends on the value of the msg parameter. </param>
            <param name="lParam">Specifies additional message information. The content of this parameter depends on the value of the msg parameter. </param>
            <param name="plResult">Pointer to an LRESULT value that, when this method returns, receives the result of the hit test.</param>
            <returns>TRUE if DwmDefWindowProc handled the message; otherwise, FALSE. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.DwmGetCompositionTimingInfo(System.IntPtr)">
            <summary>
            Retrieves the current composition timing information.
            </summary>
            <param name="hwnd">The handle to the window for which the composition timing information should be retrieved.</param>
            <returns>A pointer to a DWM_TIMING_INFO structure that, when this function returns successfully, receives the current composition timing information for the window. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.DwmExtendFrameIntoClientArea(System.IntPtr,Eniux.Wpf.Controls.WindowCore.NativeMethods.MARGINS)">
            <summary>
            Extends the window frame behind the client area.
            </summary>
            <param name="hWnd">The handle to the window for which the frame is extended into the client area</param>
            <param name="pMargins">The pointer to a MARGINS Structure structure 
            that describes the margins to use when extending the frame into the client area.</param>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.DwmIsCompositionEnabled">
            <summary>
            Is DWM enabled
            </summary>
            <returns>Is DWM enabled</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.IsDwmEnabled">
            <summary>
            Is DWM enabled
            </summary>
            <returns>Is DWM enabled</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.IsWindowVisible(System.IntPtr)">
            <summary>
            The IsWindowVisible function retrieves the visibility state of the specified window. 
            </summary>
            <param name="hwnd">Handle to the window to test. </param>
            <returns>If the specified window, its parent window, its parent's parent window, and so forth, have the WS_VISIBLE style, the return value is nonzero. Otherwise, the return value is zero. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.EnableMenuItem(System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            The EnableMenuItem function enables, disables, or grays the specified menu item. 
            </summary>
            <param name="hMenu">Handle to the menu.</param>
            <param name="uIDEnableItem">Specifies the menu item to be enabled, disabled, or grayed, as determined by the uEnable parameter. This parameter specifies an item in a menu bar, menu, or submenu. </param>
            <param name="uEnable">Controls the interpretation of the uIDEnableItem parameter and indicate whether the menu item is enabled, disabled, or grayed. </param>
            <returns>The return value specifies the previous state of the menu item (it is either MF_DISABLED, MF_ENABLED, or MF_GRAYED). If the menu item does not exist, the return value is -1.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.TrackPopupMenuEx(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The TrackPopupMenuEx function displays a shortcut menu at the specified location and 
            tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen.
            </summary>
            <param name="hmenu">Handle to the shortcut menu to be displayed. This handle can be 
            obtained by calling the CreatePopupMenu function to create a new shortcut menu or 
            by calling the GetSubMenu function to retrieve a handle to a submenu associated with an existing menu item.</param>
            <param name="fuFlags">Specifies function options</param>
            <param name="x">Horizontal location of the shortcut menu, in screen coordinates.</param>
            <param name="y">Vertical location of the shortcut menu, in screen coordinates</param>
            <param name="hwnd">Handle to the window that owns the shortcut menu. This window receives 
            all messages from the menu. The window does not receive a WM_COMMAND message from the menu 
            until the function returns. If you specify TPM_NONOTIFY in the fuFlags parameter, the 
            function does not send messages to the window identified by hwnd. However, you must still
             pass a window handle in hwnd. It can be any window handle from your application.</param>
            <param name="lptpm">Pointer to a TPMPARAMS structure that specifies an area of the screen 
            the menu should not overlap. This parameter can be NULL.</param>
            <returns>If you specify TPM_RETURNCMD in the fuFlags parameter, the return value is the 
            menu-item identifier of the item that the user selected. If the user cancels the menu 
            without making a selection, or if an error occurs, then the return value is zero.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
            The GetSystemMenu function allows the application to access the window menu 
            (also known as the system menu or the control menu) for copying and modifying. 
            </summary>
            <param name="hWnd">Handle to the window that will own a copy of the window menu.</param>
            <param name="bRevert">Specifies the action to be taken. If this parameter is FALSE, 
            GetSystemMenu returns a handle to the copy of the window menu currently in use. 
            The copy is initially identical to the window menu, but it can be modified. 
            If this parameter is TRUE, GetSystemMenu resets the window menu back to the default state. 
            The previous window menu, if any, is destroyed.</param>
            <returns>If the bRevert parameter is FALSE, the return value is a handle to a copy of 
            the window menu. If the bRevert parameter is TRUE, the return value is NULL. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The PostMessage function places (posts) a message in the message queue 
            associated with the thread that created the specified window and returns 
            without waiting for the thread to process the message. 
            </summary>
            <param name="hWnd">Handle to the window whose window procedure is to receive the message.
            The following values have special meanings.</param>
            <param name="Msg">Specifies the message to be posted.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies additional message-specific information.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetWindowPlacement(System.IntPtr,Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPLACEMENT)">
            <summary>
            The GetWindowPlacement function retrieves the show state and the restored, minimized, and maximized positions of the specified window. 
            </summary>
            <param name="hwnd">Handle to the window. </param>
            <param name="lpwndpl">Pointer to the WINDOWPLACEMENT structure that receives the show state and position information. Before calling GetWindowPlacement, set the length member of the WINDOWPLACEMENT structure to sizeof( WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly. </param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.LowWord(System.IntPtr)">
            <summary>
            Gets low word of dword
            </summary>
            <param name="value">Dword</param>
            <returns>Low word of dword</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.HiWord(System.IntPtr)">
            <summary>
            Gets hi word of dword
            </summary>
            <param name="value">Dword</param>
            <returns>Hi word of dword</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.MakeDWord(System.Int32,System.Int32)">
            <summary>
            Created DWORD from two WORDs
            </summary>
            <param name="lo">Low word</param>
            <param name="hi">Hi word</param>
            <returns>Result DWORD</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            The SetWindowRgn function sets the window region of a window. 
            The window region determines the area within the window where the system permits drawing. 
            The system does not display any portion of a window that lies outside of the window region 
            </summary>
            <param name="hWnd">Handle to window</param>
            <param name="hRgn">Handle to region</param>
            <param name="bRedraw">Window redraw option</param>
            <returns></returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.CreateRoundRectRgn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The CreateRoundRectRgn function creates a rectangular region with rounded corners
            </summary>
            <param name="nLeftRect">Specifies the x-coordinate of the upper-left corner of the region in device units.</param>
            <param name="nTopRect">Specifies the y-coordinate of the upper-left corner of the region in device units.</param>
            <param name="nRightRect">Specifies the x-coordinate of the lower-right corner of the region in device units.</param>
            <param name="nBottomRect">Specifies the y-coordinate of the lower-right corner of the region in device units</param>
            <param name="nWidthEllipse">Specifies the width of the ellipse used to create the rounded corners in device units.</param>
            <param name="nHeightEllipse">Specifies the height of the ellipse used to create the rounded corners in device units.</param>
            <returns></returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The CreateRectRgn function creates a rectangular region.
            </summary>
            <param name="nLeftRect"> x-coordinate of upper-left corner</param>
            <param name="nTopRect">y-coordinate of upper-left corner</param>
            <param name="nRightRect">x-coordinate of lower-right corner</param>
            <param name="nBottomRect">y-coordinate of lower-right corner</param>
            <returns></returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, 
            or palette, freeing all system resources associated with the object. After the object 
            is deleted, the specified handle is no longer valid. 
            </summary>
            <param name="hObject">Handle to a logical pen, brush, font, bitmap, region, or palette. </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the specified handle is not valid or is currently selected into a DC, the return value is zero.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <summary>
            The GetWindowLong function retrieves information about the specified window. The function also retrieves the 32-bit (long) value at the specified offset into the extra window memory.If you are retrieving a pointer or a handle, this function has been superseded by the GetWindowLongPtr function. (Pointers and handles are 32 bits on 32-bit Microsoft Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use GetWindowLongPtr.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer</param>
            <returns>If the function succeeds, the return value is the requested 32-bit value. If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            The SetWindowLong function changes an attribute of the specified window. 
            The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">Specifies the replacement value. </param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. 
            These windows are ordered according to their appearance on the screen. 
            The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">A handle to the window</param>
            <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order</param>
            <param name="X">Specifies the new position of the left side of the window, in client coordinates</param>
            <param name="Y">Specifies the new position of the top of the window, in client coordinates</param>
            <param name="cx">Specifies the new width of the window, in pixels</param>
            <param name="cy">Specifies the new height of the window, in pixels</param>
            <param name="uFlags">Specifies the window sizing and positioning flags.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.EnumChildWindows(System.IntPtr,Eniux.Wpf.Controls.WindowCore.NativeMethods.EnumChildProc,System.IntPtr)">
            <summary>
            The EnumChildWindows function enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns FALSE.
            </summary>
            <param name="hWndParent">Handle to the parent window whose child windows are to be enumerated. If this parameter is NULL, this function is equivalent to EnumWindows.</param>
            <param name="lpEnumFunc">Pointer to an application-defined callback function</param>
            <param name="lParam">Specifies an application-defined value to be passed to the callback function</param>
            <returns>Not used</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            The SetParent function changes the parent window of the specified child window. 
            </summary>
            <param name="hWndChild">Handle to the child window</param>
            <param name="hWndNewParent">Handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window. Windows 2000/XP: If this parameter is HWND_MESSAGE, the child window becomes a message-only window. </param>
            <returns> the function succeeds, the return value is a handle to the previous parent window. If the function fails, the return value is NULL. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetWindowInfo(System.IntPtr,Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO@)">
            <summary>
            The GetWindowInfo function retrieves information about the specified window.
            </summary>
            <param name="hwnd">Handle to the window whose information is to be retrieved. </param>
            <param name="pwi">Pointer to a WINDOWINFO structure to receive the information. Note that you must set WINDOWINFO.cbSize to sizeof(WINDOWINFO) before calling this function. </param>
            <returns>If the function succeeds, the return value is nonzero.If the function fails, the return value is zero</returns>        
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetClassLongPtr(System.IntPtr,System.Int32)">
            <summary>
            The GetClassLongPtr function retrieves the specified value from the WNDCLASSEX structure associated with the specified window.
            If you are retrieving a pointer or a handle, this function supersedes the GetClassLong function. (Pointers and handles are 32 bits on 32-bit Microsoft Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use GetClassLongPtr.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs. </param>
            <param name="nIndex">Specifies the value to retrieve. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values. </param>
            <returns>If the function succeeds, the return value is the requested value.If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.LoadImage(System.IntPtr,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Loads an icon, cursor, animated cursor, or bitmap.
            </summary>
            <param name="hinst">Handle to the module of either a DLL or executable (.exe) that contains the image to be loaded</param>
            <param name="lpszName">Specifies the image to load</param>
            <param name="uType">Specifies the type of image to be loaded. </param>
            <param name="cxDesired">Specifies the width, in pixels, of the icon or cursor</param>
            <param name="cyDesired">Specifies the height, in pixels, of the icon or cursor</param>
            <param name="fuLoad">This parameter can be one or more of the following values.</param>
            <returns>If the function succeeds, the return value is the requested value.If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetWindowRect(System.IntPtr,Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect@)">
            <summary>
            The GetWindowRect function retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen. 
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="lpRect">Pointer to a structure that receives the screen coordinates of the upper-left and lower-right corners of the window</param>
            <returns>If the function succeeds, the return value is nonzero.If the function fails, the return value is zero</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetClientRect(System.IntPtr,Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect@)">
            <summary>
            The GetClientRect function retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0). 
            </summary>
            <param name="hWnd"> Handle to the window whose client coordinates are to be retrieved. </param>
            <param name="lpRect">Pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window. </param>
            <returns>If the function succeeds, the return value is nonzero.If the function fails, the return value is zero</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.AdjustWindowRectEx(Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            The AdjustWindowRectEx function calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. 
            </summary>
            <param name="lpRect">Pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area. </param>
            <param name="dwStyle">Specifies the window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.</param>
            <param name="bMenu">Specifies whether the window has a menu. </param>
            <param name="dwExStyle">Specifies the extended window style of the window whose required size is to be calculated. For more information, see CreateWindowEx.</param>
            <returns>If the function succeeds, the return value is nonzero.If the function fails, the return value is zero</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.ChooseColor(Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR)">
            <summary>
            Creates a Color dialog box that enables the user to select a color.
            </summary>
            <param name="lpcc">A pointer to a CHOOSECOLOR structure that contains information used to initialize the dialog box. When ChooseColor returns, this structure contains information about the user's color selection.</param>
            <returns>If the user clicks the OK button of the dialog box, the return value is nonzero. The rgbResult member of the CHOOSECOLOR structure contains the RGB color value of the color selected by the user.If the user cancels or closes the Color dialog box or an error occurs, the return value is zero. </returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.ToUnicodeEx(System.UInt32,System.UInt32,System.Byte[],System.Text.StringBuilder,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            The ToUnicodeEx function translates the specified virtual-key 
            code and keyboard state to the corresponding 
            Unicode character or characters
            </summary>
            <returns>1, 2 or more if success, otherwise fail</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetKeyboardState(System.Byte[])">
            <summary>
            The GetKeyboardState function copies the status
             of the 256 virtual keys to the specified buffer. 
            </summary>
            <returns>If the function fails, the return value is zero</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.MapVirtualKeyEx(System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            The MapVirtualKeyEx function translates (maps) a virtual-key 
            code into a scan code or character value, or translates a scan 
            code into a virtual-key code. The function translates the codes 
            using the input language and an input locale identifier
            </summary>
            <returns>The return value is either a scan code, 
            a virtual-key code, or a character value, depending 
            on the value of uCode and uMapType. If there is no translation,
            the return value is zero</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.LoadKeyboardLayout(System.String,System.UInt32)">
            <summary>
            The LoadKeyboardLayout function loads a new input locale identifier 
            (formerly called the keyboard layout) into the system. Several input
            locale identifiers can be loaded at a time, but only one per process 
            is active at a time. Loading multiple input locale identifiers makes 
            it possible to rapidly switch between them
            </summary>
            <returns>If the function succeeds, the return value is the input 
            locale identifier to the locale matched with the requested name. 
            If no matching locale is available, the return value is NULL</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.UnloadKeyboardLayout(System.IntPtr)">
            <summary>
            The UnloadKeyboardLayout function unloads an input locale identifier 
            (formerly called a keyboard layout). 
            </summary>
            <param name="hkl">Input locale identifier to unload</param>
            <returns>If the function succeeds, the return value is nonzero</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetKeyboardLayoutList(System.Int32,System.IntPtr[])">
            <summary>
            The GetKeyboardLayoutList function retrieves the input locale identifiers 
            (formerly called keyboard layout handles) corresponding to the current set 
            of input locales in the system. The function copies the 
            identifiers to the specified buffer.
            </summary>
            <param name="nBuff">Specifies the maximum number of handles that the buffer can hold</param>
            <param name="lpList">Pointer to the buffer that receives the array of input locale identifiers</param>
            <returns>If the function succeeds, the return value is the number of input locale 
            identifiers copied to the buffer or, if nBuff is zero, the return value is the size, 
            in array elements, of the buffer needed to receive all current input locale identifiers
            If the function fails, the return value is zero</returns>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>
            移除系统按钮和系统菜单
            </summary>
            <param name="hWnd"></param>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR">
            <summary>
            Contains information the ChooseColor function uses to initialize the Color dialog box. After the user closes the dialog box, the system returns information about the user's selection in this structure. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR.lStructSize">
            <summary>
            The length, in bytes, of the structure. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR.hwndOwner">
            <summary>
            A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be NULL if the dialog box has no owner. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR.hInstance">
            <summary>
            If the CC_ENABLETEMPLATEHANDLE flag is set in the Flags member, hInstance is a handle to a memory object containing a dialog box template. If the CC_ENABLETEMPLATE flag is set, hInstance is a handle to a module that contains a dialog box template named by the lpTemplateName member. If neither CC_ENABLETEMPLATEHANDLE nor CC_ENABLETEMPLATE is set, this member is ignored. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR.rgbResult">
            <summary>
            If the CC_RGBINIT flag is set, rgbResult specifies the color initially selected when the dialog box is created. If the specified color value is not among the available colors, the system selects the nearest solid color available. If rgbResult is zero or CC_RGBINIT is not set, the initially selected color is black. If the user clicks the OK button, rgbResult specifies the user's color selection. To create a COLORREF color value, use the RGB macro. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR.lpCustColors">
            <summary>
            A pointer to an array of 16 values that contain red, green, blue (RGB) values for the custom color boxes in the dialog box. If the user modifies these colors, the system updates the array with the new RGB values. To preserve new custom colors between calls to the ChooseColor function, you should allocate static memory for the array. To create a COLORREF color value, use the RGB macro. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR.Flags">
            <summary>
            A set of bit flags that you can use to initialize the Color dialog box. When the dialog box returns, it sets these flags to indicate the user's input. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR.lCustData">
            <summary>
            Application-defined data that the system passes to the hook procedure identified by the lpfnHook member. When the system sends the WM_INITDIALOG message to the hook procedure, the message's lParam parameter is a pointer to the CHOOSECOLOR structure specified when the dialog was created. The hook procedure can use this pointer to get the lCustData value. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR.lpfnHook">
            <summary>
            A pointer to a CCHookProc hook procedure that can process messages intended for the dialog box. This member is ignored unless the CC_ENABLEHOOK flag is set in the Flags member. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.CHOOSECOLOR.lpTemplateName">
            <summary>
            The name of the dialog box template resource in the module identified by the hInstance member. This template is substituted for the standard dialog box template. For numbered dialog box resources, lpTemplateName can be a value returned by the MAKEINTRESOURCE macro. This member is ignored unless the CC_ENABLETEMPLATE flag is set in the Flags member. 
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.NCCALCSIZE_PARAMS">
            <summary>
            The NCCALCSIZE_PARAMS structure contains information that an application can use while processing the WM_NCCALCSIZE message to calculate the size, position, and valid contents of the client area of a window. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.NCCALCSIZE_PARAMS.rect0">
            <summary>
            Specifies an array of rectangles. The meaning of the array of rectangles changes during the processing of the WM_NCALCSIZE message
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.NCCALCSIZE_PARAMS.rect1">
            <summary>
            Specifies an array of rectangles. The meaning of the array of rectangles changes during the processing of the WM_NCALCSIZE message
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.NCCALCSIZE_PARAMS.rect2">
            <summary>
            Specifies an array of rectangles. The meaning of the array of rectangles changes during the processing of the WM_NCALCSIZE message
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.NCCALCSIZE_PARAMS.lppos">
            <summary>
            Pointer to a WINDOWPOS structure that contains the size and position values specified in the operation that moved or resized the window. 
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPOS">
            <summary>
            The WINDOWPOS structure contains information about the size and position of a window. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPOS.hwnd">
            <summary>
            Identifies the window. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPOS.hwndInsertAfter">
            <summary>
            Identifies the window behind which this window is placed. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPOS.x">
            <summary>
            Specifies the position of the left edge of the window. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPOS.y">
            <summary>
            Specifies the position of the right edge of the window. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPOS.cx">
            <summary>
            Specifies the window width, in pixels. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPOS.cy">
            <summary>
            Specifies the window height, in pixels. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPOS.flags">
            <summary>
            Specifies window-positioning options. 
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect">
            <summary>
            The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect.Left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect.Top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect.Right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.Rect.Bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.MonitorInfo">
            <summary>
            The MONITORINFO structure contains information about a display monitor.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MonitorInfo.Size">
            <summary>
            The size of the structure, in bytes. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MonitorInfo.Monitor">
            <summary>
            A RECT structure that specifies the display monitor rectangle, expressed 
            in virtual-screen coordinates. 
            Note that if the monitor is not the primary display monitor, 
            some of the rectangle's coordinates may be negative values. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MonitorInfo.Work">
            <summary>
            A RECT structure that specifies the work area rectangle of the display monitor, 
            expressed in virtual-screen coordinates. Note that if the monitor is not the primary 
            display monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MonitorInfo.Flags">
            <summary>
            A set of flags that represent attributes of the display monitor. 
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.MARGINS">
            <summary>
            Returned by the GetThemeMargins function to define the margins of windows that have visual styles applied. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MARGINS.cxLeftWidth">
            <summary>
            Width of the left border that retains its size.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MARGINS.cxRightWidth">
            <summary>
            Width of the right border that retains its size.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MARGINS.cyTopHeight">
            <summary>
            Height of the top border that retains its size.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MARGINS.cyBottomHeight">
            <summary>
            Height of the bottom border that retains its size.
            </summary>
        </member>
        <member name="M:Eniux.Wpf.Controls.WindowCore.NativeMethods.MARGINS.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="left"> Width of the left border that retains its size.</param>
            <param name="top">Height of the top border that retains its size.</param>
            <param name="right">Width of the right border that retains its size.</param>
            <param name="bottom">Height of the bottom border that retains its size.</param>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.POINT">
            <summary>
            The POINT structure defines the x- and y- coordinates of a point. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.POINT.x">
            <summary>
            Specifies the x-coordinate of the point. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.POINT.y">
            <summary>
            Specifies the y-coordinate of the point. 
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.MINMAXINFO">
            <summary>
            The MINMAXINFO structure contains information about a window's maximized size 
            and position and its minimum and maximum tracking size. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MINMAXINFO.ptReserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MINMAXINFO.ptMaxSize">
            <summary>
            Specifies the maximized width (POINT.x) and the maximized height (POINT.y) of the window. 
            For top-level windows, this value is based on the width of the primary monitor.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MINMAXINFO.ptMaxPosition">
            <summary>
            Specifies the position of the left side of the maximized window (POINT.x) and the
            position of the top of the maximized window (POINT.y). For top-level windows, this 
            value is based on the position of the primary monitor.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MINMAXINFO.ptMinTrackSize">
            <summary>
            Specifies the minimum tracking width (POINT.x) and the minimum tracking height 
            (POINT.y) of the window. This value can be obtained programmatically from the 
            system metrics SM_CXMINTRACK and SM_CYMINTRACK.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.MINMAXINFO.ptMaxTrackSize">
            <summary>
            Specifies the maximum tracking width (POINT.x) and the maximum tracking 
            height (POINT.y) of the window. This value is based on the size of the virtual 
            screen and can be obtained programmatically from the system 
            metrics SM_CXMAXTRACK and SM_CYMAXTRACK.
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO">
            <summary>
            The WINDOWINFO structure contains window information.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.cbSize">
            <summary>
            The size of the structure, in bytes. The caller must set this to sizeof(WINDOWINFO). 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.rcWindow">
            <summary>
            Pointer to a RECT structure that specifies the coordinates of the window. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.rcClient">
            <summary>
            Pointer to a RECT structure that specifies the coordinates of the client area
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.dwStyle">
            <summary>
            The window styles. For a table of window styles, see CreateWindowEx.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.dwExStyle">
            <summary>
            The extended window styles. For a table of extended window styles, see CreateWindowEx
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.dwWindowStatus">
            <summary>
            The window status. If this member is WS_ACTIVECAPTION, the window is active. Otherwise, this member is zero
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.cxWindowBorders">
            <summary>
            The width of the window border, in pixels.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.cyWindowBorders">
            <summary>
            The height of the window border, in pixels. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.atomWindowType">
            <summary>
            The window class atom (see RegisterClass). 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWINFO.wCreatorVersion">
            <summary>
            The Microsoft Windows version of the application that created the window. 
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.UNSIGNED_RATIO">
            <summary>
            A ratio used with the Desktop Window Manager (DWM) timing API.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.UNSIGNED_RATIO.uiNumerator">
            <summary>
            The ratio numerator.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.UNSIGNED_RATIO.uiDenominator">
            <summary>
            The ratio denominator
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO">
            <summary>
            Contains Desktop Window Manager (DWM) composition timing information.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cbSize">
            <summary>
            The size of this DWM_TIMING_INFO structure. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.rateRefresh">
            <summary>
            The monitor refresh rate
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.qpcRefreshPeriod">
            <summary>
            The monitor refresh rate.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.rateCompose">
            <summary>
            The composition rate.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.qpcVBlank">
            <summary>
            The query performance counter value before the vertical blank.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cRefresh">
            <summary>
            The DWM refresh counter.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cDXRefresh">
            <summary>
            The Microsoft DirectX refresh counter.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.qpcCompose">
            <summary>
            The query performance counter value for a frame composition.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFrame">
            <summary>
            The frame number that was composed at qpcCompose. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cDXPresent">
            <summary>
            The DirectX present number used to identify rendering frames.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cRefreshFrame">
            <summary>
            The refresh count of the frame that was composed at qpcCompose. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFrameSubmitted">
            <summary>
            The DWM frame number that was last submitted.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cDXPresentSubmitted">
            <summary>
            The DirectX present number that was last submitted.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFrameConfirmed">
            <summary>
            The DWM frame number that was last confirmed as presented.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cDXPresentConfirmed">
            <summary>
            The DirectX present number that was last confirmed as presented.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cRefreshConfirmed">
            <summary>
            The target refresh count of the last frame confirmed completed by the graphics processing unit (GPU).
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cDXRefreshConfirmed">
            <summary>
            The DirectX refresh count when the frame was confirmed as presented.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFramesLate">
            <summary>
            The number of frames the DWM presented late.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFramesOutstanding">
            <summary>
            The number of composition frames that have been issued but have not been confirmed as completed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFrameDisplayed">
            <summary>
            The last frame displayed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.qpcFrameDisplayed">
            <summary>
            The query performance counter (QPC) time of the composition pass when the frame was displayed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cRefreshFrameDisplayed">
            <summary>
            The vertical refresh count when the frame should have become visible.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFrameComplete">
            <summary>
            The ID of the last frame marked complete.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.qpcFrameComplete">
            <summary>
            /The QPC time when the last frame was marked as completed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFramePending">
            <summary>
            The ID of the last frame marked as pending.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.qpcFramePending">
            <summary>
            The QPC time when the last frame was marked pending.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFramesDisplayed">
            <summary>
            The number of unique frames displayed. This value is valid only after a second call to DwmGetCompositionTimingInfo. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFramesComplete">
            <summary>
            The number of new completed frames that have been received.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFramesPending">
            <summary>
            The number of new frames submitted to DirectX but not yet completed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFramesAvailable">
            <summary>
            The number of frames available but not displayed, used, or dropped. This value is valid only after a second call to DwmGetCompositionTimingInfo. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFramesDropped">
            <summary>
            The number of rendered frames that were never displayed because composition occurred too late. This value is valid only after a second call to DwmGetCompositionTimingInfo. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cFramesMissed">
            <summary>
            The number of times an old frame was composed when a new frame should have been used but was not available.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cRefreshNextDisplayed">
            <summary>
            The frame count at which the next frame is scheduled to be displayed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cRefreshNextPresented">
            <summary>
            The frame count at which the next DirectX present is scheduled to be displayed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cRefreshesDisplayed">
            <summary>
            The total number of refreshes that have been displayed for the application since DwmSetPresentParameters was last called. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cRefreshesPresented">
            <summary>
            The total number of refreshes that have been presented by the application since DwmSetPresentParameters was last called. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cRefreshStarted">
            <summary>
            The refresh number when content for this window started to be displayed.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cPixelsReceived">
            <summary>
            The total number of pixels DirectX redirected to the DWM.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cPixelsDrawn">
            <summary>
            The number of pixels drawn.
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.DWM_TIMING_INFO.cBuffersEmpty">
            <summary>
            The number of empty buffers in the flip chain.
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPLACEMENT">
            <summary>
            The WINDOWPLACEMENT structure contains information about the placement of a window on the screen. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPLACEMENT.length">
            <summary>
            Specifies the length, in bytes, of the structure. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof( WINDOWPLACEMENT). 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPLACEMENT.flags">
            <summary>
            Specifies flags that control the position of the minimized window and the method by which the window is restored. This member can be one or more of the following values. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPLACEMENT.showCmd">
            <summary>
            Specifies the current show state of the window. This member can be one of the following values. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPLACEMENT.ptMinPosition">
            <summary>
            Specifies the coordinates of the window's upper-left corner when the window is minimized. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPLACEMENT.ptMaxPosition">
            <summary>
            Specifies the coordinates of the window's upper-left corner when the window is maximized. 
            </summary>
        </member>
        <member name="F:Eniux.Wpf.Controls.WindowCore.NativeMethods.WINDOWPLACEMENT.rcNormalPosition">
            <summary>
            Specifies the window's coordinates when the window is in the restored position. 
            </summary>
        </member>
        <member name="T:Eniux.Wpf.Controls.WindowCore.NativeMethods.EnumChildProc">
            <summary>
            The EnumChildProc function is an application-defined callback function used with the EnumChildWindows function. It receives the child window handles. The WNDENUMPROC type defines a pointer to this callback function. EnumChildProc is a placeholder for the application-defined function name. 
            </summary>
            <param name="hwnd">Handle to a child window of the parent window specified in EnumChildWindows</param>
            <param name="lParam">Specifies the application-defined value given in EnumChildWindows</param>
            <returns>To continue enumeration, the callback function must return TRUE; to stop enumeration, it must return FALSE</returns>
        </member>
    </members>
</doc>
